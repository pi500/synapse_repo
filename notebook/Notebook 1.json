{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mypool89",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "235d8fe6-89f2-4565-9607-9e4f30feb056"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7374728e-d82a-4420-8e42-c2f7ef16e4c3/resourceGroups/new_rp/providers/Microsoft.Synapse/workspaces/mywp7971/bigDataPools/mypool89",
				"name": "mypool89",
				"type": "Spark",
				"endpoint": "https://mywp7971.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mypool89",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"from pyspark import SparkContext\r\n",
					"# Create SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"# Read CSV file into RDD\r\n",
					"rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"# Show RDD elements\r\n",
					"rdd.take(5) "
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"lisn = rdd.collect()\r\n",
					"def remove_quote_new(input_string):\r\n",
					"    modified_string = input_string[:2] + input_string[2:-1].replace('#', '') + input_string[-1]\r\n",
					"    return modified_string\r\n",
					"#print(lisn)\r\n",
					"for i in lisn:\r\n",
					"    no = i.split(',')\r\n",
					"    #if re.match(r'^\".*\"$', no[0]) is not None:\r\n",
					"    if no[0].startswith('\"') and no[0].endswith('\"'):\r\n",
					"        result = remove_quote_new(no[0])\r\n",
					"        print(result)\r\n",
					"    no[0] = result\r\n",
					"        \r\n",
					"\r\n",
					"print(no)"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_list = rdd.collect()\r\n",
					"def remove_quote_new(input_string):\r\n",
					"    modified_string = input_string[:2] + input_string[2:-1].replace('#', '') + input_string[-1]\r\n",
					"    return modified_string\r\n",
					"boo = []\r\n",
					"def remove_quotes(text):\r\n",
					"    # Define a regular expression pattern to match a quote not followed by a comma\r\n",
					"    pattern = r'(?<!,)\"(?!,)'\r\n",
					"    \r\n",
					"    # Replace all occurrences of quotes that are not followed by a comma with an empty string\r\n",
					"    result = re.sub(pattern, '', text)\r\n",
					"    \r\n",
					"    return result\r\n",
					"#print(new_list)\r\n",
					"my_list = []\r\n",
					"for i in new_list:\r\n",
					"    koo = []\r\n",
					"    koo = i.split(',')\r\n",
					"    print(koo)\r\n",
					"    for f in koo:\r\n",
					"        if f[0] =='\"' and f[-1] == '\"':\r\n",
					"            boo.append(remove_quote_new(f))\r\n",
					"        else:\r\n",
					"            boo.append(f)\r\n",
					"    \r\n",
					"    #print( koo)\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"    #my_list.append(replace_quotes(i))\r\n",
					"    #print(i.split(',')[3])\r\n",
					"    #print(lat_list)\r\n",
					"#print(my_list)\r\n",
					"print(boo)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def remove_hash_within_range(input_string):\r\n",
					"    if len(input_string) > 3:  # Check if the string is longer than 3 characters\r\n",
					"        # Remove # character within the specified index range\r\n",
					"        modified_string = input_string[:2] + input_string[2:-1].replace('#', '') + input_string[-1]\r\n",
					"        return modified_string\r\n",
					"    else:\r\n",
					"        return input_string  # Return the original string if it's too short\r\n",
					"\r\n",
					"# Example usage\r\n",
					"my_string = \"A#BC#DEF#GHI#\"\r\n",
					"result_string = remove_hash_within_range(my_string)\r\n",
					"print(result_string)\r\n",
					""
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import re\r\n",
					"\r\n",
					"def remove_quotes_except_comma_surrounded(input_string):\r\n",
					"    # Pattern to match double quotes not preceded or followed by a comma\r\n",
					"    pattern = r'(?<!,)\"(?!,)'\r\n",
					"\r\n",
					"    # Replace matched patterns with an empty string\r\n",
					"    result = re.sub(pattern, '', input_string)\r\n",
					"\r\n",
					"    return result\r\n",
					"\r\n",
					"# Example usage\r\n",
					"my_string = 'This is a \"sample\", string \"with\" quotes'\r\n",
					"result_string = remove_quotes_except_comma_surrounded(my_string)\r\n",
					"print(result_string)\r\n",
					""
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def replace_quotes(line):\r\n",
					"    return line.replace('\"', '')\r\n",
					"    print(line)\r\n",
					"   \r\n",
					"    \r\n",
					"\r\n",
					"# Apply function using map()\r\n",
					"replaced_rdd = rdd.map(replace_quotes)\r\n",
					"\r\n",
					"\r\n",
					"# Show transformed RDD elements\r\n",
					"#data_rdd = replaced_rdd.collect()\r\n",
					"#replaced_rdd.take(5)\r\n",
					"\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"replaced_rdd.take(5)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"schema = StructType([\r\n",
					"    StructField('name', StringType(), True),\r\n",
					"    StructField('school', StringType(), True),\r\n",
					"    StructField('fees', IntegerType(), True),\r\n",
					"    StructField('age', IntegerType(), True),\r\n",
					"    StructField('place', StringType(), True)\r\n",
					"])"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"header = replaced_rdd.first()\r\n",
					"\r\n",
					"# Filter out the header from the data\r\n",
					"data_rdd = rdd.filter(lambda line: line != header)\r\n",
					"\r\n",
					"# Create DataFrame using withColumnRenamed to set header\r\n",
					"df = data_rdd.toDF(header)\r\n",
					"\r\n",
					"# Show DataFrame\r\n",
					"df.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#from pyspark.sql import SparkSession, Row\r\n",
					"#row_rdd = replaced_rdd.map(lambda x: Row(first_name=x[0], last_name=x[1]))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.createDataFrame(replaced_rdd,schema)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"replaced_rdd.first()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Create SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"RDD to DataFrame with Header\").getOrCreate()\r\n",
					"\r\n",
					"# Example RDD with header and data\r\n",
					"rdd = spark.sparkContext.parallelize([\r\n",
					"    ('1', 'Alice', 25),\r\n",
					"    ('2', 'Bob', 30),\r\n",
					"    ('3', 'Charlie', 35)\r\n",
					"])\r\n",
					"\r\n",
					"rdd.take(5)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"rdd.first()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_rdd = replaced_rdd.collect()\r\n",
					"print(data_rdd)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"\r\n",
					"# Your list of strings\r\n",
					"\r\n",
					"\r\n",
					"# Splitting the header and data\r\n",
					"header = data_rdd[0]\r\n",
					"data = data_rdd[1:]\r\n",
					"\r\n",
					"# Split each line by comma and create Row objects\r\n",
					"split_data = [line.split(',') for line in data]\r\n",
					"rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"# Create DataFrame with inferred schema\r\n",
					"df = spark.createDataFrame(rows, header.split(','))\r\n",
					"\r\n",
					"# Show DataFrame\r\n",
					"df.show()\r\n",
					"df.printSchema()\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int')).printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"\r\n",
					"    \r\n",
					"    from pyspark import SparkContext\r\n",
					"    # Create SparkContext\r\n",
					"    #sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"    # Read CSV file into RDD\r\n",
					"    rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"    def rdd_to_df(rdd):\r\n",
					"        def replace_quotes(line):\r\n",
					"            return line.replace('\"', '')\r\n",
					"   \r\n",
					"    \r\n",
					"        # Apply function using map()\r\n",
					"        replaced_rdd = rdd.map(replace_quotes)\r\n",
					"\r\n",
					"\r\n",
					"        # Show transformed RDD elements\r\n",
					"        data_rdd = replaced_rdd.collect()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"        # Splitting the header and data\r\n",
					"        header = data_rdd[0]\r\n",
					"        data = data_rdd[1:]\r\n",
					"\r\n",
					"        # Split each line by comma and create Row objects\r\n",
					"        split_data = [line.split(',') for line in data]\r\n",
					"        rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"        # Create DataFrame with inferred schema\r\n",
					"        df = spark.createDataFrame(rows, header.split(','))\r\n",
					"        df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"        df.printSchema()\r\n",
					"        df.show()\r\n",
					"\r\n",
					"end_time = time.time()\r\n",
					"\r\n",
					"# Calculate time taken\r\n",
					"elapsed_time = end_time - start_time\r\n",
					"print(f\"Time taken: {elapsed_time} seconds\")\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"# Create SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"CSV to RDD\") vefv\r\n",
					"\r\n",
					"# Read CSV file into RDD\r\n",
					"rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"def rdd_to_df(rdd):\r\n",
					"    def replace_quotes(line):\r\n",
					"        return line.replace('\"', '')\r\n",
					"   \r\n",
					"    \r\n",
					"        # Apply function using map()\r\n",
					"    replaced_rdd = rdd.map(replace_quotes)\r\n",
					"\r\n",
					"\r\n",
					"    # Show transformed RDD elements\r\n",
					"    data_rdd = replaced_rdd.collect()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    # Splitting the header and data\r\n",
					"    header = data_rdd[0]\r\n",
					"    data = data_rdd[1:]\r\n",
					"\r\n",
					"    # Split each line by comma and create Row objects\r\n",
					"    split_data = [line.split(',') for line in data]\r\n",
					"    rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"    # Create DataFrame with inferred schema\r\n",
					"    df = spark.createDataFrame(rows, header.split(','))\r\n",
					"    df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"    df.printSchema()\r\n",
					"    df.show()\r\n",
					"\r\n",
					"rdd_to_df(rdd)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(type(replaced_rdd))\r\n",
					"print(type(data_rdd))\r\n",
					"print(rows)"
				],
				"execution_count": null
			}
		]
	}
}