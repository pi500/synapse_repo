{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mypool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "05c3d225-1690-497e-ab1d-15015dff515b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7374728e-d82a-4420-8e42-c2f7ef16e4c3/resourceGroups/new_rp/providers/Microsoft.Synapse/workspaces/mywp7971/bigDataPools/mypool",
				"name": "mypool",
				"type": "Spark",
				"endpoint": "https://mywp7971.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mypool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print('hello')"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"'''from pyspark import SparkContext\r\n",
					"from pyspark.sql import SparkSession, Row\r\n",
					"# Create SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"# Read CSV file into RDD\r\n",
					"rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"# Show RDD elements\r\n",
					"#rdd.take(5)\r\n",
					"\r\n",
					"lisn = rdd.collect()\r\n",
					"print(lisn)\r\n",
					"data_rdd = []\r\n",
					"def remove_quote_new(input_string):\r\n",
					"    modified_string = input_string[:1] + input_string[1:-1].replace('\"', '') + input_string[-1]\r\n",
					"    return modified_string\r\n",
					"#print(lisn)\r\n",
					"for i in lisn:\r\n",
					"    new_list = i.split(',')\r\n",
					"    #print(no)\r\n",
					"    #if re.match(r'^\".*\"$', no[0]) is not None:\r\n",
					"    if new_list[0].startswith('\"') and new_list[0].endswith('\"'):\r\n",
					"        result = remove_quote_new(new_list[0])\r\n",
					"    \r\n",
					"        new_list[0] = result\r\n",
					"        n_str = ','.join(new_list)\r\n",
					"        data_rdd.append(n_str)\r\n",
					"        \r\n",
					"        \r\n",
					"    else:\r\n",
					"        n_str = ','.join(new_list)\r\n",
					"        data_rdd.append(n_str)\r\n",
					"        \r\n",
					"\r\n",
					"#print(data_rdd)\r\n",
					"\r\n",
					"\r\n",
					"header = data_rdd[0]\r\n",
					"data = data_rdd[1:]\r\n",
					"\r\n",
					"# Split each line by comma and create Row objects\r\n",
					"split_data = [line.split(',') for line in data]\r\n",
					"rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"# Create DataFrame with inferred schema\r\n",
					"df = spark.createDataFrame(rows, header.split(','))\r\n",
					"df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"df.printSchema()\r\n",
					"df.show()\r\n",
					"'''\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"'''\r\n",
					"import time\r\n",
					"\r\n",
					"# Record start time\r\n",
					"start_time = time.time()\r\n",
					"for _ in range(1000000):\r\n",
					"    \r\n",
					"    from pyspark import SparkContext\r\n",
					"    # Create SparkContext\r\n",
					"    #sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"    # Read CSV file into RDD\r\n",
					"    rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"    def rdd_to_df(rdd):\r\n",
					"        def replace_quotes(line):\r\n",
					"            return line.replace('\"', '')\r\n",
					"   \r\n",
					"    \r\n",
					"        # Apply function using map()\r\n",
					"        replaced_rdd = rdd.map(replace_quotes)\r\n",
					"\r\n",
					"\r\n",
					"        # Show transformed RDD elements\r\n",
					"        data_rdd = replaced_rdd.collect()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"        # Splitting the header and data\r\n",
					"        header = data_rdd[0]\r\n",
					"        data = data_rdd[1:]\r\n",
					"\r\n",
					"        # Split each line by comma and create Row objects\r\n",
					"        split_data = [line.split(',') for line in data]\r\n",
					"        rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"        # Create DataFrame with inferred schema\r\n",
					"        df = spark.createDataFrame(rows, header.split(','))\r\n",
					"        df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"        df.printSchema()\r\n",
					"        df.show()\r\n",
					"\r\n",
					"end_time = time.time()\r\n",
					"\r\n",
					"# Calculate time taken\r\n",
					"elapsed_time = end_time - start_time\r\n",
					"print(f\"Time taken: {elapsed_time} seconds\")\r\n",
					"'''\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"from pyspark.sql import SparkSession, Row\r\n",
					"# Create SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"# Read CSV file into RDD\r\n",
					"rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_rdd = rdd.collect()\r\n",
					"print(data_rdd)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"char = '\"'\r\n",
					"index = 0"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_data = []\r\n",
					"for i in data_rdd:\r\n",
					"    noo = i.split(',')\r\n",
					"    if char in noo[index][1:-1]:\r\n",
					"        modified_string = noo[index][:1] + noo[index][1:-1].replace(char, '') + noo[index][-1]\r\n",
					"        noo[index] = modified_string\r\n",
					"        n_str = ','.join(noo)\r\n",
					"        new_data.append(n_str)\r\n",
					"    else:\r\n",
					"        n_str = ','.join(noo)\r\n",
					"        new_data.append(n_str)\r\n",
					"\r\n",
					"print(new_data)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"def is_digit(s):\r\n",
					"    return s.isdigit()\r\n",
					"def remove_char(columnName, charName):\r\n",
					"    \r\n",
					"    schema = StructType([\r\n",
					"        StructField('name', StringType(), True),\r\n",
					"        StructField('school', StringType(), True),\r\n",
					"        StructField('fees', IntegerType(), True),\r\n",
					"        StructField('age', IntegerType(), True),\r\n",
					"        StructField('place', StringType(), True)\r\n",
					"    ])\r\n",
					"    rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"    neww = rdd.first()\r\n",
					"    index = neww.index(columnName)\r\n",
					"    data_rdd = rdd.collect()\r\n",
					"    new_data = []\r\n",
					"    for i in data_rdd:\r\n",
					"        noo = i.split(',')\r\n",
					"        if char in noo[index][1:-1]:\r\n",
					"            modified_string = noo[index][:1] + noo[index][1:-1].replace(char, '') + noo[index][-1]\r\n",
					"            noo[index] = modified_string\r\n",
					"            n_str = ','.join(noo)\r\n",
					"            new_data.append(n_str)\r\n",
					"        else:\r\n",
					"            n_str = ','.join(noo)\r\n",
					"            new_data.append(n_str)\r\n",
					"\r\n",
					"    header = new_data[0]\r\n",
					"    data = new_data[1:]\r\n",
					"\r\n",
					"    # Split each line by comma and create Row objects\r\n",
					"    split_data = [line.split(',') for line in data]\r\n",
					"    rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"    # Create DataFrame with inferred schema\r\n",
					"    df = spark.createDataFrame(rows, header.split(','))\r\n",
					"    df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"    df.printSchema()\r\n",
					"    df.show()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"remove_char('name','\"')\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, when, regexp_extract\r\n",
					"from pyspark.sql.types import StringType, IntegerType\r\n",
					"def is_digit(s):\r\n",
					"    return s.isdigit()\r\n",
					"df_cast = df.select(\r\n",
					"    col(\"Name\"),\r\n",
					"    when(col(\"Age\").rlike(\"^[0-9]+$\"), col(\"Age\").cast(IntegerType())).otherwise(col(\"Age\")).alias(\"Age\")\r\n",
					")"
				],
				"execution_count": null
			}
		]
	}
}