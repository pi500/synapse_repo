{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mypool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bc38c2e2-47f0-489a-8577-3fa76c1a1ef1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7374728e-d82a-4420-8e42-c2f7ef16e4c3/resourceGroups/new_rp/providers/Microsoft.Synapse/workspaces/mywp7971/bigDataPools/mypool",
				"name": "mypool",
				"type": "Spark",
				"endpoint": "https://mywp7971.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mypool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print('hello')"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"'''from pyspark import SparkContext\r\n",
					"from pyspark.sql import SparkSession, Row\r\n",
					"# Create SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"# Read CSV file into RDD\r\n",
					"rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"# Show RDD elements\r\n",
					"#rdd.take(5)\r\n",
					"\r\n",
					"lisn = rdd.collect()\r\n",
					"print(lisn)\r\n",
					"data_rdd = []\r\n",
					"def remove_quote_new(input_string):\r\n",
					"    modified_string = input_string[:1] + input_string[1:-1].replace('\"', '') + input_string[-1]\r\n",
					"    return modified_string\r\n",
					"#print(lisn)\r\n",
					"for i in lisn:\r\n",
					"    new_list = i.split(',')\r\n",
					"    #print(no)\r\n",
					"    #if re.match(r'^\".*\"$', no[0]) is not None:\r\n",
					"    if new_list[0].startswith('\"') and new_list[0].endswith('\"'):\r\n",
					"        result = remove_quote_new(new_list[0])\r\n",
					"    \r\n",
					"        new_list[0] = result\r\n",
					"        n_str = ','.join(new_list)\r\n",
					"        data_rdd.append(n_str)\r\n",
					"        \r\n",
					"        \r\n",
					"    else:\r\n",
					"        n_str = ','.join(new_list)\r\n",
					"        data_rdd.append(n_str)\r\n",
					"        \r\n",
					"\r\n",
					"#print(data_rdd)\r\n",
					"\r\n",
					"\r\n",
					"header = data_rdd[0]\r\n",
					"data = data_rdd[1:]\r\n",
					"\r\n",
					"# Split each line by comma and create Row objects\r\n",
					"split_data = [line.split(',') for line in data]\r\n",
					"rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"# Create DataFrame with inferred schema\r\n",
					"df = spark.createDataFrame(rows, header.split(','))\r\n",
					"df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"df.printSchema()\r\n",
					"df.show()\r\n",
					"'''\r\n",
					"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"'''\r\n",
					"import time\r\n",
					"\r\n",
					"# Record start time\r\n",
					"start_time = time.time()\r\n",
					"for _ in range(1000000):\r\n",
					"    \r\n",
					"    from pyspark import SparkContext\r\n",
					"    # Create SparkContext\r\n",
					"    #sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"    # Read CSV file into RDD\r\n",
					"    rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"    def rdd_to_df(rdd):\r\n",
					"        def replace_quotes(line):\r\n",
					"            return line.replace('\"', '')\r\n",
					"   \r\n",
					"    \r\n",
					"        # Apply function using map()\r\n",
					"        replaced_rdd = rdd.map(replace_quotes)\r\n",
					"\r\n",
					"\r\n",
					"        # Show transformed RDD elements\r\n",
					"        data_rdd = replaced_rdd.collect()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"        # Splitting the header and data\r\n",
					"        header = data_rdd[0]\r\n",
					"        data = data_rdd[1:]\r\n",
					"\r\n",
					"        # Split each line by comma and create Row objects\r\n",
					"        split_data = [line.split(',') for line in data]\r\n",
					"        rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"        # Create DataFrame with inferred schema\r\n",
					"        df = spark.createDataFrame(rows, header.split(','))\r\n",
					"        df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"        df.printSchema()\r\n",
					"        df.show()\r\n",
					"\r\n",
					"end_time = time.time()\r\n",
					"\r\n",
					"# Calculate time taken\r\n",
					"elapsed_time = end_time - start_time\r\n",
					"print(f\"Time taken: {elapsed_time} seconds\")\r\n",
					"'''\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"from pyspark.sql import SparkSession, Row\r\n",
					"# Create SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"CSV to RDD\")\r\n",
					"\r\n",
					"# Read CSV file into RDD\r\n",
					"rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_rdd = rdd.collect()\r\n",
					"print(data_rdd)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"char = '\"'\r\n",
					"index = 0"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_data = []\r\n",
					"for i in data_rdd:\r\n",
					"    noo = i.split(',')\r\n",
					"    if char in noo[index][1:-1]:\r\n",
					"        modified_string = noo[index][:1] + noo[index][1:-1].replace(char, '') + noo[index][-1]\r\n",
					"        noo[index] = modified_string\r\n",
					"        n_str = ','.join(noo)\r\n",
					"        new_data.append(n_str)\r\n",
					"    else:\r\n",
					"        n_str = ','.join(noo)\r\n",
					"        new_data.append(n_str)\r\n",
					"\r\n",
					"print(new_data)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import *\r\n",
					"def is_digit(s):\r\n",
					"    return s.isdigit()\r\n",
					"def remove_char(columnName, charName):\r\n",
					"    \r\n",
					"    schema = StructType([\r\n",
					"        StructField('name', StringType(), True),\r\n",
					"        StructField('school', StringType(), True),\r\n",
					"        StructField('fees', IntegerType(), True),\r\n",
					"        StructField('age', IntegerType(), True),\r\n",
					"        StructField('place', StringType(), True)\r\n",
					"    ])\r\n",
					"    rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"    neww = rdd.first()\r\n",
					"    index = neww.index(columnName)\r\n",
					"    data_rdd = rdd.collect()\r\n",
					"    new_data = []\r\n",
					"    for i in data_rdd:\r\n",
					"        noo = i.split(',')\r\n",
					"        if char in noo[index][1:-1]:\r\n",
					"            modified_string = noo[index][:1] + noo[index][1:-1].replace(char, '') + noo[index][-1]\r\n",
					"            noo[index] = modified_string\r\n",
					"            n_str = ','.join(noo)\r\n",
					"            new_data.append(n_str)\r\n",
					"        else:\r\n",
					"            n_str = ','.join(noo)\r\n",
					"            new_data.append(n_str)\r\n",
					"\r\n",
					"    header = new_data[0]\r\n",
					"    data = new_data[1:]\r\n",
					"\r\n",
					"    # Split each line by comma and create Row objects\r\n",
					"    split_data = [line.split(',') for line in data]\r\n",
					"    rows = [Row(*line) for line in split_data]\r\n",
					"\r\n",
					"    # Create DataFrame with inferred schema\r\n",
					"    df = spark.createDataFrame(rows, header.split(','))\r\n",
					"    df = df.withColumn('fees',df.fees.cast('int')).withColumn('age',df.age.cast('int'))\r\n",
					"    df.printSchema()\r\n",
					"    df.show()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"remove_char('name','\"')\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, when, regexp_extract\r\n",
					"from pyspark.sql.types import StringType, IntegerType\r\n",
					"def is_digit(s):\r\n",
					"    return s.isdigit()\r\n",
					"df_cast = df.select(\r\n",
					"    col(\"Name\"),\r\n",
					"    when(col(\"Age\").rlike(\"^[0-9]+$\"), col(\"Age\").cast(IntegerType())).otherwise(col(\"Age\")).alias(\"Age\")\r\n",
					")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"\r\n",
					"# Initialize SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"SplitRecordsExample\")\r\n",
					"\r\n",
					"# Example RDD with comma-separated records\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"\r\n",
					"# Collect and print the transformed RDD\r\n",
					"collected_data = split_rdd.collect()\r\n",
					"for record in collected_data:\r\n",
					"    print(record)\r\n",
					""
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"split_rdd.collect()"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#def replace_quotes_in_list(sublist):\r\n",
					"    #return [string.replace('\"', '') for string in sublist]\r\n",
					"\r\n",
					"char = '\"'\r\n",
					"\r\n",
					"def replace_quotes_in_list(strings_list):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"            modified_string = (\r\n",
					"                string[:1] +\r\n",
					"                string[1:-1].replace('\"', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                string[-1:]\r\n",
					"            )\r\n",
					"            modified_list.append(modified_string)\r\n",
					"        else:\r\n",
					"            modified_list.append(string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"# Apply the function using map() to replace quotes in each string in the list\r\n",
					"modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"modified_rdd.collect()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"header = modified_rdd.first()\r\n",
					"\r\n",
					"# Filter out the header row from the RDD\r\n",
					"data_without_header = modified_rdd.filter(lambda row: row != header)\r\n",
					"data_without_header.collect()\r\n",
					"\r\n",
					"# Convert RDD to DataFrame with headers\r\n",
					"df = spark.createDataFrame(data_without_header,header)\r\n",
					"df.show()"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.show()"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def csvtodf(char):\r\n",
					"    from pyspark import SparkContext\r\n",
					"\r\n",
					"\r\n",
					"    # Initialize SparkContext\r\n",
					"    #sc = SparkContext(\"local\", \"SplitRecordsExample\")\r\n",
					"\r\n",
					"    # Example RDD with comma-separated records\r\n",
					"    original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"    # Function to split each record by comma\r\n",
					"    def split_record(record):\r\n",
					"        return record.split(',')\r\n",
					"\r\n",
					"    # Apply the split_record function to each record using map()\r\n",
					"    split_rdd = original_rdd.map(split_record)\r\n",
					"\r\n",
					"    # Collect and print the transformed RDD\r\n",
					"    #collected_data = split_rdd.collect()\r\n",
					"    #for record in collected_data:\r\n",
					"        #print(record)\r\n",
					"\r\n",
					"    if char == '\"':\r\n",
					"            def replace_quotes_in_list(strings_list):\r\n",
					"                modified_list = []\r\n",
					"                for string in strings_list:\r\n",
					"                    if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                        modified_string = (\r\n",
					"                            string[:1] +\r\n",
					"                            string[1:-1].replace('\"', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                            string[-1:]\r\n",
					"                        )\r\n",
					"                        modified_list.append(modified_string)\r\n",
					"                    else:\r\n",
					"                        modified_list.append(string)\r\n",
					"                return modified_list\r\n",
					"\r\n",
					"            # Apply the function using map() to replace quotes in each string in the list\r\n",
					"            modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"            #modified_rdd.collect()\r\n",
					"\r\n",
					"    elif char == '/':\r\n",
					"            def replace_quotes_in_list(strings_list):\r\n",
					"                modified_list = []\r\n",
					"                for string in strings_list:\r\n",
					"                    if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                        modified_string = (\r\n",
					"                            string[:1] +\r\n",
					"                            string[1:-1].replace('/', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                            string[-1:]\r\n",
					"                        )\r\n",
					"                        modified_list.append(modified_string)\r\n",
					"                    else:\r\n",
					"                        modified_list.append(string)\r\n",
					"                return modified_list\r\n",
					"\r\n",
					"            # Apply the function using map() to replace quotes in each string in the list\r\n",
					"            modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"            #modified_rdd.collect()\r\n",
					"    elif char == '/\"':\r\n",
					"            def replace_quotes_in_list(strings_list):\r\n",
					"                modified_list = []\r\n",
					"                for string in strings_list:\r\n",
					"                    if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                        modified_string = (\r\n",
					"                            string[:1] +\r\n",
					"                            string[1:-1].replace('/\"', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                            string[-1:]\r\n",
					"                        )\r\n",
					"                        modified_list.append(modified_string)\r\n",
					"                    else:\r\n",
					"                        modified_list.append(string)\r\n",
					"                return modified_list\r\n",
					"\r\n",
					"            # Apply the function using map() to replace quotes in each string in the list\r\n",
					"            modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"            #modified_rdd.collect()\r\n",
					"    header = modified_rdd.first()\r\n",
					"\r\n",
					"    # Filter out the header row from the RDD\r\n",
					"    data_without_header = modified_rdd.filter(lambda row: row != header)\r\n",
					"    data_without_header.collect()\r\n",
					"\r\n",
					"    # Convert RDD to DataFrame with headers\r\n",
					"    df = spark.createDataFrame(data_without_header,header)\r\n",
					"    df.show()\r\n",
					"\r\n",
					"csvtodf('/\"')\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"new_rdd = original_rdd\r\n",
					"new_rdd.collect()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def csvtodf(char):\r\n",
					"    from pyspark import SparkContext\r\n",
					"\r\n",
					"\r\n",
					"    # Initialize SparkContext\r\n",
					"    #sc = SparkContext(\"local\", \"SplitRecordsExample\")\r\n",
					"\r\n",
					"    # Example RDD with comma-separated records\r\n",
					"    original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"    # Function to split each record by comma\r\n",
					"    def split_record(record):\r\n",
					"        return record.split(',')\r\n",
					"\r\n",
					"    # Apply the split_record function to each record using map()\r\n",
					"    split_rdd = original_rdd.map(split_record)\r\n",
					"\r\n",
					"    # Collect and print the transformed RDD\r\n",
					"    #collected_data = split_rdd.collect()\r\n",
					"    #for record in collected_data:\r\n",
					"        #print(record)\r\n",
					"\r\n",
					"    match char:\r\n",
					"        case '\"':\r\n",
					"            def replace_quotes_in_list(strings_list):\r\n",
					"                modified_list = []\r\n",
					"                for string in strings_list:\r\n",
					"                    if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                        modified_string = (\r\n",
					"                            string[:1] +\r\n",
					"                            string[1:-1].replace('\"', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                            string[-1:]\r\n",
					"                        )\r\n",
					"                        modified_list.append(modified_string)\r\n",
					"                    else:\r\n",
					"                        modified_list.append(string)\r\n",
					"                return modified_list\r\n",
					"\r\n",
					"            # Apply the function using map() to replace quotes in each string in the list\r\n",
					"            modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"            #modified_rdd.collect()\r\n",
					"\r\n",
					"        case \"'\":\r\n",
					"            def replace_quotes_in_list(strings_list):\r\n",
					"                modified_list = []\r\n",
					"                for string in strings_list:\r\n",
					"                    if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                        modified_string = (\r\n",
					"                            string[:1] +\r\n",
					"                            string[1:-1].replace(\"'\", '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                            string[-1:]\r\n",
					"                        )\r\n",
					"                        modified_list.append(modified_string)\r\n",
					"                    else:\r\n",
					"                        modified_list.append(string)\r\n",
					"                return modified_list\r\n",
					"\r\n",
					"            # Apply the function using map() to replace quotes in each string in the list\r\n",
					"            modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"            #modified_rdd.collect()\r\n",
					"        case \"#\":\r\n",
					"            def replace_quotes_in_list(strings_list):\r\n",
					"                modified_list = []\r\n",
					"                for string in strings_list:\r\n",
					"                    if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                        modified_string = (\r\n",
					"                            string[:1] +\r\n",
					"                            string[1:-1].replace('#', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                            string[-1:]\r\n",
					"                        )\r\n",
					"                        modified_list.append(modified_string)\r\n",
					"                    else:\r\n",
					"                        modified_list.append(string)\r\n",
					"                return modified_list\r\n",
					"\r\n",
					"            # Apply the function using map() to replace quotes in each string in the list\r\n",
					"            modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"            #modified_rdd.collect()\r\n",
					"    header = modified_rdd.first()\r\n",
					"\r\n",
					"    # Filter out the header row from the RDD\r\n",
					"    data_without_header = modified_rdd.filter(lambda row: row != header)\r\n",
					"    data_without_header.collect()\r\n",
					"\r\n",
					"    # Convert RDD to DataFrame with headers\r\n",
					"    df = spark.createDataFrame(data_without_header,header)\r\n",
					"    df.show()\r\n",
					"\r\n",
					"csvtodf('\"')\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"from pyspark import SparkContext\r\n",
					"char = '\"'\r\n",
					"\r\n",
					"\r\n",
					"# Initialize SparkContext\r\n",
					"#sc = SparkContext(\"local\", \"SplitRecordsExample\")\r\n",
					"\r\n",
					"# Example RDD with comma-separated records\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"original_rdd.collect()\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"\r\n",
					"# Collect and print the transformed RDD\r\n",
					"#collected_data = split_rdd.collect()\r\n",
					"#for record in collected_data:\r\n",
					"\r\n",
					"#print(record)\r\n",
					"match char:\r\n",
					"    case '\"':\r\n",
					"        def replace_quotes_in_list(strings_list):\r\n",
					"            modified_list = []\r\n",
					"            for string in strings_list:\r\n",
					"                if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                            modified_string = (\r\n",
					"                                string[:1] +\r\n",
					"                                string[1:-1].replace('\"', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                                string[-1:]\r\n",
					"                            )\r\n",
					"                            modified_list.append(modified_string)\r\n",
					"                else:\r\n",
					"                            modified_list.append(string)\r\n",
					"            return modified_list\r\n",
					"\r\n",
					"        # Apply the function using map() to replace quotes in each string in the list\r\n",
					"        #modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"        #modified_rdd.collect()        \r\n",
					"                \r\n",
					"\r\n",
					"    case \"'\":\r\n",
					"        def replace_quotes_in_list(strings_list):\r\n",
					"            modified_list = []\r\n",
					"            for string in strings_list:\r\n",
					"                if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                            modified_string = (\r\n",
					"                                string[:1] +\r\n",
					"                                string[1:-1].replace(\"'\", '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                                string[-1:]\r\n",
					"                            )\r\n",
					"                            modified_list.append(modified_string)\r\n",
					"                else:\r\n",
					"                            modified_list.append(string)\r\n",
					"            return modified_list\r\n",
					"\r\n",
					"        # Apply the function using map() to replace quotes in each string in the list\r\n",
					"        #modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"        #modified_rdd.collect()\r\n",
					"    case '#':\r\n",
					"        def replace_quotes_in_list(strings_list):\r\n",
					"            modified_list = []\r\n",
					"            for string in strings_list:\r\n",
					"                if len(string) > 2:  # Ensure the string has more than 2 characters\r\n",
					"                            modified_string = (\r\n",
					"                                string[:1] +\r\n",
					"                                string[1:-1].replace('#', '') +  # Replace quotes between indices 1 and second-to-last\r\n",
					"                                string[-1:]\r\n",
					"                            )\r\n",
					"                            modified_list.append(modified_string)\r\n",
					"                else:\r\n",
					"                            modified_list.append(string)\r\n",
					"            return modified_list\r\n",
					"\r\n",
					"        # Apply the function using map() to replace quotes in each string in the list\r\n",
					"        #modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"        #modified_rdd.collect()\r\n",
					"\r\n",
					"                \r\n",
					"modified_rdd = split_rdd.map(replace_quotes_in_list)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"header = modified_rdd.first()\r\n",
					"data_without_header = modified_rdd.filter(lambda row: row != header)\r\n",
					"data_without_header.collect()\r\n",
					"\r\n",
					"# Convert RDD to DataFrame with headers\r\n",
					"df = spark.createDataFrame(data_without_header,header)\r\n",
					"df.show(1000)\r\n",
					""
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"original_rdd.take(50)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Example RDD with comma-separated records\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"def replace_quotes_in_list(strings_list, char):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        if len(string) > 2:  \r\n",
					"            modified_string = (\r\n",
					"                string[:1] +\r\n",
					"                string[1:-1].replace(char, '') +\r\n",
					"                string[-1:]\r\n",
					"            )\r\n",
					"            modified_list.append(modified_string)\r\n",
					"        else:\r\n",
					"            modified_list.append(string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"# Assuming split_rdd is your RDD of strings\r\n",
					"\r\n",
					"char_to_match = '\"'  # or any other character you're matching\r\n",
					"modified_rdd = None  # Initialize modified_rdd\r\n",
					"\r\n",
					"match char_to_match:\r\n",
					"    case '\"':\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x, '\"'))\r\n",
					"    case \"'\":\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x, \"'\"))\r\n",
					"    case \"#\" :\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x, '#'))\r\n",
					"\r\n",
					"header = modified_rdd.first()\r\n",
					"data_without_header = modified_rdd.filter(lambda row: row != header)\r\n",
					"data_without_header.collect()\r\n",
					"\r\n",
					"# Convert RDD to DataFrame with headers\r\n",
					"df = spark.createDataFrame(data_without_header,header)\r\n",
					"df.show(1000)\r\n",
					""
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.show(10)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sample_count = df.sample(False, 0.1).count()  # Adjust the fraction as needed\r\n",
					"print(\"Estimated count:\", sample_count)\r\n",
					""
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"def cast_columns_by_content(df):\r\n",
					"    for col_name in df.columns:\r\n",
					"        sample_data = df.select(col(col_name)).limit(100)  # Take a sample of data from each column\r\n",
					"\r\n",
					"        # Check if the column can be cast to integer\r\n",
					"        if sample_data.filter(col(col_name).cast(\"int\").isNotNull()).count() == sample_data.count():\r\n",
					"            df = df.withColumn(col_name, col(col_name).cast(\"int\"))\r\n",
					"        # Check if the column can be cast to float\r\n",
					"        elif sample_data.filter(col(col_name).cast(\"float\").isNotNull()).count() == sample_data.count():\r\n",
					"            df = df.withColumn(col_name, col(col_name).cast(\"float\"))\r\n",
					"        # Add more elif conditions for other data types as needed\r\n",
					"\r\n",
					"    return df\r\n",
					"\r\n",
					"# Usage:\r\n",
					"new_df = cast_columns_by_content(df)\r\n",
					""
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"\r\n",
					"my_dict = {name:['\"'],school:[\"//\"]}\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Example RDD with comma-separated records\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"new_dict = {}\r\n",
					"my_dict = {'name':'\"','school':\"//\"}\r\n",
					"for i in ccc:\r\n",
					"    if i in my_dict:\r\n",
					"        \r\n",
					"        new_dict[i] = ccc.index(i)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def replace_quotes_in_list(strings_list, char):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        if len(string) > 2:  \r\n",
					"            modified_string = (\r\n",
					"                string[:1] +\r\n",
					"                string[1:-1].replace(char, '') +\r\n",
					"                string[-1:]\r\n",
					"            )\r\n",
					"            modified_list.append(modified_string)\r\n",
					"        else:\r\n",
					"            modified_list.append(string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"# Assuming split_rdd is your RDD of strings\r\n",
					"\r\n",
					"char_to_match = '\"'  # or any other character you're matching\r\n",
					"modified_rdd = None  # Initialize modified_rdd\r\n",
					"\r\n",
					"\r\n",
					"for key, value in my_dict.items():\r\n",
					"    for element in value_list:\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x[new_dict['{key}']], value))\r\n",
					"\r\n",
					"\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x, '\"'))\r\n",
					"    case \"'\":\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x, \"'\"))\r\n",
					"    case \"#\" :\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x, '#'))\r\n",
					"\r\n",
					"header = modified_rdd.first()\r\n",
					"data_without_header = modified_rdd.filter(lambda row: row != header)\r\n",
					"data_without_header.collect()\r\n",
					"\r\n",
					"# Convert RDD to DataFrame with headers\r\n",
					"df = spark.createDataFrame(data_without_header,header)\r\n",
					"df.show(1000)\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_issue.csv\")\r\n",
					"\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"\r\n",
					"ccc = split_rdd.first()\r\n",
					"print(ccc)\r\n",
					"\r\n",
					"print(type(split_rdd))\r\n",
					"split_rdd.foreach(lambda x: print(x[0]))\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"new_dict = {}\r\n",
					"my_dict = {'name':'\"','school':\"//\"}\r\n",
					"for i in ccc:\r\n",
					"    if i in my_dict:\r\n",
					"        \r\n",
					"        new_dict[i] = ccc.index(i)\r\n",
					"\r\n",
					"print(new_dict)\r\n",
					"\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"my_dict = {'name':['\"'],'school':[\"//\"]}\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Example RDD with comma-separated records\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_book.csv\")\r\n",
					"\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"new_dict = {}\r\n",
					"my_dict = {'name':['\"'],'school':[\"//\"]}\r\n",
					"#for i in ccc:\r\n",
					"    #if i in my_dict:\r\n",
					"        \r\n",
					"        #new_dict[i] = ccc.index(i)\r\n",
					"\r\n",
					"lisn = split_rdd.first()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def replace_quotes_in_list(strings_list, char):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        if len(string) > 2:  \r\n",
					"            modified_string = (\r\n",
					"                string[:1] +\r\n",
					"                string[1:-1].replace(char, '') +\r\n",
					"                string[-1:]\r\n",
					"            )\r\n",
					"            modified_list.append(modified_string)\r\n",
					"        else:\r\n",
					"            modified_list.append(string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"# Assuming split_rdd is your RDD of strings\r\n",
					"\r\n",
					"char_to_match = '\"'  # or any other character you're matching\r\n",
					"modified_rdd = None  # Initialize modified_rdd\r\n",
					"\r\n",
					"\r\n",
					"for key, value in my_dict.items():\r\n",
					"    for element in value_list:\r\n",
					"        modified_rdd = split_rdd.map(lambda x: replace_quotes_in_list(x[lisn[key]]), value)\r\n",
					"\r\n",
					"modified_rdd.take(2)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"my_dict = {'name':'\"','school':\"//\"}\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Example RDD with comma-separated records\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_book.csv\")\r\n",
					"\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"\r\n",
					"lisn = split_rdd.first()\r\n",
					"\r\n",
					"def replace_quotes_in_list(strings_list, char):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        if len(string) > 2:  \r\n",
					"            modified_string = (\r\n",
					"                string[:1] +\r\n",
					"                string[1:-1].replace(char, '') +\r\n",
					"                string[-1:]\r\n",
					"            )\r\n",
					"            modified_list.append(modified_string)\r\n",
					"        else:\r\n",
					"            modified_list.append(string)\r\n",
					"    return modified_list\r\n",
					"modified_rdd = split_rdd\r\n",
					"for key,value in my_dict.items():\r\n",
					"    modified_rdd = modified_rdd.map(lambda x: replace_quotes_in_list(x[lisn.index(key)], value))\r\n",
					"\r\n",
					"modified_rdd.collect()\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark import SparkContext\r\n",
					"\r\n",
					"my_dict = {'name': '\"', 'school': '//'}\r\n",
					"my_lis = []\r\n",
					"\r\n",
					"# Example RDD with comma-separated records\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_book.csv\")\r\n",
					"\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"\r\n",
					"lisn = split_rdd.first()\r\n",
					"header = split_rdd.first()\r\n",
					"\r\n",
					"\r\n",
					"# Function to replace characters in a list of strings\r\n",
					"def replace_characters_in_list(strings_list, char_to_replace, replacement_char):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        modified_string = string.replace(char_to_replace, replacement_char)\r\n",
					"        modified_list.append(modified_string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"# Dictionary defining characters to replace for each key\r\n",
					"\r\n",
					"\r\n",
					"new_dict = {}\r\n",
					"for i, key in enumerate(split_rdd.first()):\r\n",
					"    if key in my_dict:\r\n",
					"        new_dict[key] = i\r\n",
					"\r\n",
					"# Assuming split_rdd is your RDD of strings\r\n",
					"\r\n",
					"modified_rdd = split_rdd.map(lambda x: [\r\n",
					"    replace_characters_in_list(\r\n",
					"        x[i], my_dict[key], '') if key in my_dict else x[i]\r\n",
					"    for i, key in enumerate(new_dict)\r\n",
					"])\r\n",
					"\r\n",
					"# Show the modified RDD\r\n",
					"modified_rdd.take(5)\r\n",
					""
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_book.csv\")\r\n",
					"\r\n",
					"\r\n",
					"# Function to split each record by comma\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"def replace_quotes_in_list(strings_list, char):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        if len(string) > 2:  \r\n",
					"            modified_string = (\r\n",
					"                string[:1] +\r\n",
					"                string[1:-1].replace(char, '') +\r\n",
					"                string[-1:]\r\n",
					"            )\r\n",
					"            modified_list.append(modified_string)\r\n",
					"        else:\r\n",
					"            modified_list.append(string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"my_dict = {'name': ['\"'], 'school': ['//']}\r\n",
					"list_names = split_rdd.first()  # Assuming this retrieves the list of names\r\n",
					"\r\n",
					"modified_rdd = split_rdd.map(lambda x: [\r\n",
					"    replace_quotes_in_list(\r\n",
					"        x[list_names.index(key)], value[0]\r\n",
					"    ) if key in my_dict else x[list_names.index(key)]\r\n",
					"    for key, value in my_dict.items()\r\n",
					"])\r\n",
					"\r\n",
					"modified_rdd.take(2)  # Show the modified RDD elements for the first 2 rows\r\n",
					""
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"my_dict = {'name': '\"', 'school': '//'}\r\n",
					"original_rdd = sc.textFile(\"abfss://csvfile@myadls5434.blob.core.windows.net/csv_book.csv\")\r\n",
					"def split_record(record):\r\n",
					"    return record.split(',')\r\n",
					"\r\n",
					"# Apply the split_record function to each record using map()\r\n",
					"split_rdd = original_rdd.map(split_record)\r\n",
					"# Assuming you have an RDD split_rdd with records split by comma\r\n",
					"\r\n",
					"def replace_chars_in_list(strings_list, char_to_replace):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        modified_string = string.replace(char_to_replace, '')\r\n",
					"        modified_list.append(modified_string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"modified_rdd = split_rdd.map(lambda x: [\r\n",
					"    replace_chars_in_list(x[lisn.index(key)], value) if key in my_dict else x[lisn.index(key)]\r\n",
					"    for key, value in my_dict.items()\r\n",
					"])\r\n",
					"\r\n",
					"modified_rdd.take(5)  # Show the modified RDD for the first 5 rows\r\n",
					""
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"split_rdd.collect()"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"my_dict = {'name':'\"', 'school':\"/\"}\r\n",
					"lisn = split_rdd.first()\r\n",
					"\r\n",
					"def replace_chars_in_list(strings_list, char_to_replace):\r\n",
					"    modified_list = []\r\n",
					"    for string in strings_list:\r\n",
					"        modified_string = string.replace(char_to_replace, '')\r\n",
					"        modified_list.append(modified_string)\r\n",
					"    return modified_list\r\n",
					"\r\n",
					"modified_rdd = split_rdd\r\n",
					"\r\n",
					"for key, value in my_dict.items():  # Added .items() to iterate through key-value pairs\r\n",
					"    if key in lisn:  # Checking if the key exists in the list of column names\r\n",
					"        index = lisn.index(key)  # Get the index of the key in the list\r\n",
					"        print(index)\r\n",
					"        modified_rdd = modified_rdd.map(lambda x: x[:index] + [replace_chars_in_list([x[index]], value)[0]] + x[index + 1:])\r\n",
					"            \r\n",
					"modified_rdd.take(8)"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"my_dict = {'name':'\"', 'school':\"/\"}\r\n",
					"lisn = split_rdd.first()\r\n",
					"\r\n",
					"def replace_chars_in_list(string, char_to_replace):\r\n",
					"    return string.replace(char_to_replace, '')\r\n",
					"\r\n",
					"modified_rdd = None\r\n",
					"boo = 0\r\n",
					"\r\n",
					"while boo <= len(my_dict):\r\n",
					"    no = 1\r\n",
					"    for key, value in my_dict.items():\r\n",
					"        modified_rdd_{no} = split_rdd\r\n",
					"        index = lisn.index(key)\r\n",
					"        modified_rdd = modified_rdd.map(lambda x: x[:index] + [replace_chars_in_list(x[index], value)] + x[index + 1:])\r\n",
					"            \r\n",
					"\r\n",
					"modified_rdd.take(8)\r\n",
					""
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"my_dict = {'name':'\"', 'school': '/'}\r\n",
					"lisn = split_rdd.first()\r\n",
					"\r\n",
					"def replace_chars_in_list(string, char_to_replace):\r\n",
					"    return string.replace(char_to_replace, '')\r\n",
					"\r\n",
					"# Create an initial RDD to store modifications\r\n",
					"modified_column_rdd = split_rdd\r\n",
					"\r\n",
					"\r\n",
					"for key, value in my_dict.items():\r\n",
					"    boo = 1\r\n",
					"    modified_column_rdd = f\"modified_column_rdd{boo}\"\r\n",
					"\r\n",
					"    if key in lisn:\r\n",
					"        index = lisn.index(key)\r\n",
					"        # Create a new RDD with the modified column\r\n",
					"        modified_column_rdd{boo} = modified_column_rdd.map(lambda x: x[:index] + [replace_chars_in_list(x[index], value)] + x[index + 1:])\r\n",
					"        # Merge the modified column RDD with the existing modified_rdd\r\n",
					"        modified_column_rdd = \r\n",
					"\r\n",
					"modified_rdd.take(5)  # Fetch first few rows to see the modifications\r\n",
					""
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Initialize an empty dictionary\r\n",
					"variable_dict = {}\r\n",
					"\r\n",
					"# Define the number of iterations\r\n",
					"num_iterations = 5\r\n",
					"\r\n",
					"# Loop to create keys with appended integers and assign values\r\n",
					"for i in range(num_iterations):\r\n",
					"    # Create a key with an appended integer value\r\n",
					"    key = f\"variable_{i}\"  # Using f-string for Python 3.6+\r\n",
					"    \r\n",
					"    # Assign a value to the dynamically created key\r\n",
					"    variable_dict[key] = i * 10  # Assigning a value (here, i * 10 for demonstration)\r\n",
					"\r\n",
					"# Display the dictionary with dynamically created keys\r\n",
					"print(variable_dict)\r\n",
					""
				],
				"execution_count": 85
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}