{
	"name": "Pipeline 1",
	"properties": {
		"activities": [
			{
				"name": "LoadConfigFromADLS",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "Json_lookup",
						"type": "DatasetReference",
						"parameters": {
							"storage_accounr_url": {
								"value": "@pipeline().parameters.config_storageaccount_url",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "preaudit_operations",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "LoadConfigFromADLS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "preaudit_book",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"executorSize": "Small",
					"conf": {
						"spark.dynamicAllocation.enabled": null,
						"spark.dynamicAllocation.minExecutors": null,
						"spark.dynamicAllocation.maxExecutors": null
					},
					"driverSize": "Small",
					"numExecutors": null
				}
			},
			{
				"name": "FConfig File Error",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "LoadConfigFromADLS",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": {
						"value": "@concat('configuration file does not exist or cannot be accessed. RunID:',string(pipeline().RunId),'Detail:',string(activity('LoadConfigFromADLS').output))",
						"type": "Expression"
					},
					"errorCode": {
						"value": "CONFIG_FILE_ERROR",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set rerun config",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "preaudit_operations",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "rerun_config",
					"value": {
						"value": "@json(activity('preaudit_operations').output.status.Output.result.exitValue)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "For Each Config Item",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Set rerun config",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('rerun_config')",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Check if cobol config exists",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "is_cobol_config_present",
								"value": {
									"value": "@bool(contains(item(),'is_cobol_config_present'))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Check if cobol config exists",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('is_cobol_config_present')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Set variable2",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "is_cobol_config_present",
											"value": false
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Set variable1",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "is_cobol_config_present",
											"value": {
												"value": "@bool(item().is_cobol_config_present)",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Check if headerless exists",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "is_headerless",
								"value": {
									"value": "@bool(contains(item(),'is_headerless'))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "If Condition2",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Check if headerless exists",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('is_headerless')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Set variable6",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "is_headerless",
											"value": false
										}
									},
									{
										"name": "Set variable7",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Set variable6",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "numberOfHeaders",
											"value": "1"
										}
									},
									{
										"name": "Set variable8",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Set variable7",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "numberOfFooters",
											"value": "1"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Set variable3",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "is_headerless",
											"value": {
												"value": "@bool(item().is_headerless)",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set variable4",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Set variable3",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "numberOfHeaders",
											"value": {
												"value": "@string(item().numberOfHeaders)",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set variable5",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Set variable4",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "numberOfFooters",
											"value": {
												"value": "@string(item().numberOfFooters)",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Data Set Validation",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "If Condition2",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "If Condition1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "XmlSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "XmlReadSettings",
										"validationMode": "none",
										"namespaces": true
									}
								},
								"dataset": {
									"referenceName": "Xml1",
									"type": "DatasetReference",
									"parameters": {
										"fileshare_folder": {
											"value": "@item().fileshare_folder",
											"type": "Expression"
										},
										"fileshare_path": {
											"value": "@item().fileshare_path",
											"type": "Expression"
										},
										"fileshare_username": {
											"value": "@item().fileshare_username",
											"type": "Expression"
										},
										"fileshare_password_secret_name": {
											"value": "@item().fileshare_password_secret_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Execute CopyData Pipeline",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Data Set Validation",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "FILE_INGESTION_COPY_FROM_ONPREM",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"fileshare_folder": {
										"value": "@item().fileshare_folder",
										"type": "Expression"
									},
									"fileshare_path": {
										"value": "@item().fileshare_path",
										"type": "Expression"
									},
									"fileshare_username": {
										"value": "@item().fileshare_username",
										"type": "Expression"
									},
									"fileshare_password_secret_name": {
										"value": "@item().fileshare_password_secret_name",
										"type": "Expression"
									},
									"ls_adls_url": {
										"value": "@item().ls_adls_url",
										"type": "Expression"
									},
									"ds_dest_folder": {
										"value": "@item().ds_dest_folder",
										"type": "Expression"
									},
									"ds_dest_container": {
										"value": "@item().ds_dest_container",
										"type": "Expression"
									},
									"fileshare_subfolder_wildcard": {
										"value": "@item().fileshare_subfolder_wildcard",
										"type": "Expression"
									},
									"fileshare_filename_wildcard": {
										"value": "@item().fileshare_filename_wildcard",
										"type": "Expression"
									},
									"is_cobol_config_present": {
										"value": "@item().is_cobol_config_present",
										"type": "Expression"
									},
									"is_headerless": {
										"value": "@item().is_headerless",
										"type": "Expression"
									},
									"numberOfHeaders": {
										"value": "@item().numberOfHeaders",
										"type": "Expression"
									},
									"numberOfFooters": {
										"value": "@item().numberOfFooters",
										"type": "Expression"
									},
									"effective_date": {
										"value": "@item().effective_date",
										"type": "Expression"
									},
									"is_compressed_file_present": {
										"value": "@item().is_compressed_file_present",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Dataset Validation Error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Data Set Validation",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "@concat('source data set validation failed. RunID:',string(pipeline().RunId),'Details:',string(activity('Data Set Validation').output))",
									"type": "Expression"
								},
								"errorCode": "DATASET_VALIDATION_ERROR"
							}
						},
						{
							"name": "DATA COPY ERROR",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Execute CopyData Pipeline",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "@concat('Data Copy failed. RunID:',string(pipeline().RunId),'Details:',string(activity('Execute CopyData Pipeline').output))",
									"type": "Expression"
								},
								"errorCode": "DATA_COPY_ERROR"
							}
						},
						{
							"name": "If Condition - Cobol File",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Execute CopyData Pipeline",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('is_cobol_config_present')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Set varUTCDateTime2",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "varUTCDateTime",
											"value": {
												"value": "@pipeline().parameters.effective_date",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Convert_Cobol_To_Csv",
										"type": "SynapseNotebook",
										"dependsOn": [
											{
												"activity": "Set varUTCDateTime2",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "Csv_To_Cobol_Conversion",
												"type": "NotebookReference"
											},
											"snapshot": true,
											"executorSize": "Small",
											"driverSize": "Small"
										}
									},
									{
										"name": "Set cobol file flag",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Convert_Cobol_To_Csv",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "cobol_fail_flag",
											"value": {
												"value": "@activity('Convert_Cobol_To_Csv').output.status.output.result.exitValue",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Execute Delimited File Process Pipeline_Copy1",
										"type": "ExecutePipeline",
										"dependsOn": [
											{
												"activity": "Set cobol file flag",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "Csv_Data_Load",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"adls2_account_name": {
													"value": "@item().dp_param_adls2_account_name",
													"type": "Expression"
												},
												"historical_container_name": {
													"value": "@item().dp_param_historical_container_name",
													"type": "Expression"
												},
												"landing_container_name": {
													"value": "@item().dp_param_landing_container_name",
													"type": "Expression"
												},
												"harvested_container_name": {
													"value": "@item().dp_param_harvested_container_name",
													"type": "Expression"
												},
												"metadataDBTable": {
													"value": "@item().dp_param_metadataDBTable",
													"type": "Expression"
												},
												"domain_name": {
													"value": "@item().dp_param_domain_name",
													"type": "Expression"
												},
												"ls_adls_url": {
													"value": "@item().ls_adls_url",
													"type": "Expression"
												},
												"ds_landing_folder": {
													"value": "@item().ds_landing_folder",
													"type": "Expression"
												},
												"separator": {
													"value": "@item().separator",
													"type": "Expression"
												},
												"config_container_name": {
													"value": "@item().config_container_name",
													"type": "Expression"
												},
												"is_cobol_config_present": {
													"value": "@variables('is_cobol_config_present')",
													"type": "Expression"
												},
												"is_headerless": {
													"value": "@variables('is_headerless')",
													"type": "Expression"
												},
												"numberOfHeaders": {
													"value": "@variables('numberOfHeaders')",
													"type": "Expression"
												},
												"numberOfFooters": {
													"value": "@variables('numberOfFooters')",
													"type": "Expression"
												},
												"effective_date": {
													"value": "@pipeline().parameters.effective_date",
													"type": "Expression"
												},
												"is_compressed_file_present": {
													"value": "@if(bool(contains(item(),'is_compressed_file_present')),item().is_compressed_file_present,'false')",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "FailProcess Error Copy 1",
										"type": "Fail",
										"dependsOn": [
											{
												"activity": "Execute Delimited File Process Pipeline_Copy1",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"message": {
												"value": "@concat('Delimiter File Process failed.RunId:', string(pipeline().RunId), 'Details:',string(activity('Execute Delimited File Process Pipeline_Copy1').output))",
												"type": "Expression"
											},
											"errorCode": "DELIMITED_PROCESS_ERROR"
										}
									}
								]
							}
						},
						{
							"name": "cobol_conversion_fail_check",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('cobol_fail_flag')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Post Audit Complted 3",
										"type": "SynapseNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "Generate_Audit_Metadata",
												"type": "NotebookReference"
											},
											"snapshot": true,
											"executorSize": "Small",
											"driverSize": "Small"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Fail Overall Pipeline",
										"type": "Fail",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"message": "one or more cobol file process error",
											"errorCode": "500"
										}
									},
									{
										"name": "Post Audit Failure 3",
										"type": "SynapseNotebook",
										"dependsOn": [
											{
												"activity": "Fail Overall Pipeline",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": "Generate_Audit_Metadata",
												"type": "NotebookReference"
											},
											"snapshot": true,
											"executorSize": "Small",
											"driverSize": "Small"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Post Audit Complted",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "For Each Config Item",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "Generate_Audit_Metadata",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"executorSize": "Small",
					"driverSize": "Small"
				}
			},
			{
				"name": "Post Audit Failure",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "For Each Config Item",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "Generate_Audit_Metadata",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"executorSize": "Small",
					"driverSize": "Small"
				}
			}
		],
		"parameters": {
			"config_filename": {
				"type": "string"
			},
			"config_storageaccount_url": {
				"type": "string"
			},
			"effective_date": {
				"type": "string"
			},
			"rerun_flag": {
				"type": "string"
			}
		},
		"variables": {
			"varUTCDateTime": {
				"type": "String"
			},
			"varUTCDateTime2": {
				"type": "String"
			},
			"is_cobol_config_present": {
				"type": "Boolean",
				"defaultValue": false
			},
			"numberOfHeaders": {
				"type": "String",
				"defaultValue": "1"
			},
			"numberOfFooters": {
				"type": "String",
				"defaultValue": "1"
			},
			"cobol_fail_flag": {
				"type": "String",
				"defaultValue": "false"
			},
			"rerun_config": {
				"type": "String"
			},
			"is_headerless": {
				"type": "Boolean",
				"defaultValue": false
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-12-05T14:21:36Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}